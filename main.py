import os
import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')
BASE_URL = 'https://projects.pervye.ru'

class SimpleEventsParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        })
    
    def get_all_events(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        events = []
        
        try:
            print("–ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            response = self.session.get(BASE_URL, timeout=15)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            print("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            events = self._parse_events_from_page(soup)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
        
        return events
    
    def _parse_events_from_page(self, soup):
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        events = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        selectors = [
            'div.project-card',
            'div.event-card',
            'div.card',
            '.project-item',
            '.event-item',
            'article',
            '[class*="project"]',
            '[class*="event"]',
            '[class*="card"]'
        ]
        
        event_cards = []
        for selector in selectors:
            cards = soup.select(selector)
            if cards:
                event_cards.extend(cards)
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                if len(cards) > 0:
                    break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        
        if not event_cards:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º, –∏—â–µ–º –ø–æ —Ç–µ–≥–∞–º
            event_cards = soup.find_all(['article', 'div'])
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(event_cards)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º")
        
        print(f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(event_cards)}")
        
        for i, card in enumerate(event_cards[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                event_data = self._extract_event_data(card, i)
                if event_data:
                    events.append(event_data)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i}: {e}")
                continue
        
        return events
    
    def _extract_event_data(self, card, index):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = None
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            for tag in ['h1', 'h2', 'h3', 'h4']:
                title_elem = card.find(tag)
                if title_elem:
                    break
            
            if not title_elem:
                # –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
                title_selectors = ['title', 'name', 'heading']
                for selector in title_selectors:
                    title_elem = card.find('div', class_=lambda x: x and selector in x.lower() if x else False)
                    if title_elem:
                        break
            
            title = title_elem.get_text(strip=True) if title_elem else f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{index + 1}"
            
            # –°—Å—ã–ª–∫–∞
            link_elem = card.find('a')
            if link_elem and link_elem.get('href'):
                link = link_elem['href']
                if not link.startswith('http'):
                    if link.startswith('/'):
                        link = BASE_URL + link
                    else:
                        link = f"{BASE_URL}/{link}"
            else:
                link = BASE_URL
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_elem = None
            # –ò—â–µ–º –∞–±–∑–∞—Ü—ã
            p_tags = card.find_all('p')
            if p_tags:
                desc_elem = p_tags[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü
            else:
                # –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
                desc_selectors = ['description', 'text', 'content', 'summary']
                for selector in desc_selectors:
                    desc_elem = card.find('div', class_=lambda x: x and selector in x.lower() if x else False)
                    if desc_elem:
                        break
            
            description = desc_elem.get_text(strip=True) if desc_elem else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            
            # –î–∞—Ç–∞
            date_elem = card.find('time') or card.find('div', class_=lambda x: x and 'date' in x.lower() if x else False)
            date_info = date_elem.get_text(strip=True) if date_elem else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            event_id = f"event_{index}_{hash(title + link)}"
            
            return {
                'id': event_id,
                'title': title,
                'link': link,
                'description': description[:200] + "..." if len(description) > 200 else description,
                'date': date_info
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ {index}: {e}")
            return None

class TestBot:
    def __init__(self):
        self.parser = SimpleEventsParser()
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('events.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS sent_events
                     (event_id TEXT PRIMARY KEY, title TEXT, sent_time TEXT)''')
        conn.commit()
        conn.close()
    
    def is_event_sent(self, event_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        conn = sqlite3.connect('events.db')
        c = conn.cursor()
        c.execute("SELECT event_id FROM sent_events WHERE event_id = ?", (event_id,))
        result = c.fetchone()
        conn.close()
        return result is not None
    
    def mark_event_as_sent(self, event_id, title):
        """–û—Ç–º–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        conn = sqlite3.connect('events.db')
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO sent_events (event_id, title, sent_time) VALUES (?, ?, ?)",
                  (event_id, title, datetime.now().isoformat()))
        conn.commit()
        conn.close()
    
    def send_events_to_chat(self, context: CallbackContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —á–∞—Ç"""
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...")
        
        try:
            events = self.parser.get_all_events()
            print(f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {len(events)}")
            
            if not events:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = "üîç *–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞*\n\n–ü–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —Å–∞–π—Ç–µ."
                context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=test_message,
                    parse_mode='Markdown'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
            for event in events[:3]:
                if not self.is_event_sent(event['id']):
                    try:
                        message = f"üéØ *–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!*\n\n"
                        message += f"üìå *{event['title']}*\n\n"
                        
                        if event['date'] and event['date'] != "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞":
                            message += f"üìÖ {event['date']}\n\n"
                        
                        message += f"üìÑ {event['description']}\n\n"
                        message += f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({event['link']})"
                        
                        # –ö–Ω–æ–ø–∫–∏
                        keyboard = [[
                            InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=event['link'])
                        ]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        context.bot.send_message(
                            chat_id=CHAT_ID,
                            text=message,
                            parse_mode='Markdown',
                            disable_web_page_preview=False,
                            reply_markup=reply_markup
                        )
                        
                        self.mark_event_as_sent(event['id'], event['title'])
                        print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {event['title']}")
                        
                        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            error_message = f"‚ùå *–û—à–∏–±–∫–∞ –±–æ—Ç–∞:*\n\n{str(e)}"
            context.bot.send_message(
                chat_id=CHAT_ID,
                text=error_message,
                parse_mode='Markdown'
            )
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def start_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = (
            "‚úÖ *–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–ø—É—â–µ–Ω!*\n\n"
            "–Ø –ø—Ä–æ–≤–µ—Ä—è—é —Å–∞–π—Ç projects.pervye.ru –∏ –∏—â—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–µ–π—á–∞—Å\n"
            "/test - —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º"
        )
        update.message.reply_text(welcome_message, parse_mode='Markdown')
        self.send_events_to_chat(context)
    
    def check_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /check"""
        update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...")
        self.send_events_to_chat(context)
        update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def test_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º...")
            
            response = requests.get(BASE_URL, timeout=10)
            status = "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω" if response.status_code == 200 else f"‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}"
            
            test_message = f"*–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n\n{status}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}"
            update.message.reply_text(test_message, parse_mode='Markdown')
            
        except Exception as e:
            error_message = f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:*\n\n{str(e)}"
            update.message.reply_text(error_message, parse_mode='Markdown')

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    pass

def main():
    if not BOT_TOKEN or not CHAT_ID:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    bot = TestBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", bot.start_command))
    dp.add_handler(CommandHandler("check", bot.check_command))
    dp.add_handler(CommandHandler("test", bot.test_command))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
    updater.job_queue.run_repeating(
        bot.send_events_to_chat, 
        interval=7200,  # 2 —á–∞—Å–∞
        first=0
    )
    
    print("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìç –¶–µ–ª–µ–≤–æ–π —Å–∞–π—Ç: {BASE_URL}")
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
